/*
    rmdcev is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rmdcev is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rmdcev.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_mdcev_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mdcev");
    reader.add_event(3, 3, "include", "/common/mdcev_ll.stan");
    reader.add_event(3, 0, "start", "/common/mdcev_ll.stan");
    reader.add_event(58, 55, "end", "/common/mdcev_ll.stan");
    reader.add_event(58, 4, "restart", "model_mdcev");
    reader.add_event(58, 4, "include", "/common/mdcev_ll_matrix.stan");
    reader.add_event(58, 0, "start", "/common/mdcev_ll_matrix.stan");
    reader.add_event(145, 87, "end", "/common/mdcev_ll_matrix.stan");
    reader.add_event(145, 5, "restart", "model_mdcev");
    reader.add_event(151, 11, "include", "/common/mdcev_data.stan");
    reader.add_event(151, 0, "start", "/common/mdcev_data.stan");
    reader.add_event(170, 19, "end", "/common/mdcev_data.stan");
    reader.add_event(170, 12, "restart", "model_mdcev");
    reader.add_event(179, 21, "include", "/common/mdcev_tdata.stan");
    reader.add_event(179, 0, "start", "/common/mdcev_tdata.stan");
    reader.add_event(214, 35, "end", "/common/mdcev_tdata.stan");
    reader.add_event(214, 22, "restart", "model_mdcev");
    reader.add_event(299, 105, "end", "model_mdcev");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T17__, typename T18__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T17__, T18__>::type>::type>::type>::type, Eigen::Dynamic,1>
mdcev_ll(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& j_quant,
             const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& quant_full,
             const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& log_price,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& log_num,
             const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& price_full,
             const Eigen::Matrix<T5__, Eigen::Dynamic,1>& log_inc,
             const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& dat_psi,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& M,
             const Eigen::Matrix<T8__, Eigen::Dynamic,1>& M_factorial,
             const Eigen::Matrix<T9__, Eigen::Dynamic,1>& weights,
             const Eigen::Matrix<T10__, Eigen::Dynamic,1>& psi,
             const Eigen::Matrix<T11__, Eigen::Dynamic,1>& gamma_full,
             const Eigen::Matrix<T12__, Eigen::Dynamic,1>& alpha_full,
             const T13__& scale_full,
             const int& I,
             const int& J,
             const int& G,
             const Eigen::Matrix<T17__, Eigen::Dynamic,1>& ones_g,
             const Eigen::Matrix<T18__, Eigen::Dynamic,Eigen::Dynamic>& nonzero,
             const int& model_num,
             const int& fixed_scale,
             const int& trunc_data, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T17__, T18__>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 13;
        validate_non_negative_index("log_like", "I", I);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  log_like(static_cast<Eigen::VectorXd::Index>(I));
        (void) log_like;  // dummy to suppress unused var warning

        stan::math::initialize(log_like, DUMMY_VAR__);
        stan::math::fill(log_like,DUMMY_VAR__);
        current_statement_begin__ = 14;
        validate_non_negative_index("lpsi", "I", I);
        validate_non_negative_index("lpsi", "J", J);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  lpsi(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(J));
        (void) lpsi;  // dummy to suppress unused var warning

        stan::math::initialize(lpsi, DUMMY_VAR__);
        stan::math::fill(lpsi,DUMMY_VAR__);
        stan::math::assign(lpsi,to_matrix(multiply(stan::model::rvalue(dat_psi, stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()), "dat_psi"),psi),I,J,0));
        current_statement_begin__ = 15;
        validate_non_negative_index("v_j", "I", I);
        validate_non_negative_index("v_j", "J", J);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  v_j(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(J));
        (void) v_j;  // dummy to suppress unused var warning

        stan::math::initialize(v_j, DUMMY_VAR__);
        stan::math::fill(v_j,DUMMY_VAR__);
        current_statement_begin__ = 16;
        validate_non_negative_index("f", "I", I);
        validate_non_negative_index("f", "G", G);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  f(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
        (void) f;  // dummy to suppress unused var warning

        stan::math::initialize(f, DUMMY_VAR__);
        stan::math::fill(f,DUMMY_VAR__);
        current_statement_begin__ = 17;
        validate_non_negative_index("v", "I", I);
        validate_non_negative_index("v", "G", G);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  v(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
        (void) v;  // dummy to suppress unused var warning

        stan::math::initialize(v, DUMMY_VAR__);
        stan::math::fill(v,DUMMY_VAR__);
        current_statement_begin__ = 18;
        validate_non_negative_index("vf", "I", I);
        validate_non_negative_index("vf", "G", G);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  vf(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
        (void) vf;  // dummy to suppress unused var warning

        stan::math::initialize(vf, DUMMY_VAR__);
        stan::math::fill(vf,DUMMY_VAR__);
        current_statement_begin__ = 19;
        validate_non_negative_index("sumv", "I", I);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sumv(static_cast<Eigen::VectorXd::Index>(I));
        (void) sumv;  // dummy to suppress unused var warning

        stan::math::initialize(sumv, DUMMY_VAR__);
        stan::math::fill(sumv,DUMMY_VAR__);
        current_statement_begin__ = 20;
        validate_non_negative_index("pf", "I", I);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  pf(static_cast<Eigen::VectorXd::Index>(I));
        (void) pf;  // dummy to suppress unused var warning

        stan::math::initialize(pf, DUMMY_VAR__);
        stan::math::fill(pf,DUMMY_VAR__);
        current_statement_begin__ = 21;
        validate_non_negative_index("prodvf", "I", I);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  prodvf(static_cast<Eigen::VectorXd::Index>(I));
        (void) prodvf;  // dummy to suppress unused var warning

        stan::math::initialize(prodvf, DUMMY_VAR__);
        stan::math::fill(prodvf,DUMMY_VAR__);


        current_statement_begin__ = 23;
        stan::math::assign(v_j, subtract(add(lpsi,elt_multiply(rep_matrix(subtract(transpose(stan::model::rvalue(alpha_full, stan::model::cons_list(stan::model::index_min_max(2, G), stan::model::nil_index_list()), "alpha_full")),1),I),stan::math::log(add(elt_divide(j_quant,rep_matrix(transpose(stan::model::rvalue(gamma_full, stan::model::cons_list(stan::model::index_min_max(2, G), stan::model::nil_index_list()), "gamma_full")),I)),1)))),log_price));
        current_statement_begin__ = 24;
        stan::math::assign(f, elt_divide(add(quant_full,rep_matrix(transpose(gamma_full),I)),rep_matrix(transpose(subtract(1,alpha_full)),I)));
        current_statement_begin__ = 25;
        stan::math::assign(v, append_col(multiply((get_base1(alpha_full,1,"alpha_full",1) - 1),log_num),v_j));
        current_statement_begin__ = 26;
        stan::math::assign(v, stan::model::deep_copy(stan::math::exp(divide(v,scale_full))));
        current_statement_begin__ = 27;
        stan::math::assign(sumv, multiply(v,ones_g));
        current_statement_begin__ = 29;
        stan::math::assign(vf, add(elt_divide(elt_multiply(nonzero,v),f),subtract(1,nonzero)));
        current_statement_begin__ = 30;
        stan::math::assign(pf, multiply(elt_multiply(elt_multiply(nonzero,price_full),f),ones_g));
        current_statement_begin__ = 32;
        for (int i = 1; i <= I; ++i) {

            current_statement_begin__ = 33;
            stan::model::assign(sumv, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        stan::model::deep_copy((pow(get_base1(sumv,i,"sumv",1),get_base1(M,i,"M",1)) * pow(scale_full,(get_base1(M,i,"M",1) - 1)))), 
                        "assigning variable sumv");
            current_statement_begin__ = 34;
            stan::model::assign(prodvf, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        prod(get_base1(vf,i,"vf",1)), 
                        "assigning variable prodvf");
        }
        current_statement_begin__ = 37;
        if (as_bool(logical_eq(trunc_data,1))) {
            {
            current_statement_begin__ = 38;
            validate_non_negative_index("v_1", "I", I);
            validate_non_negative_index("v_1", "G", G);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  v_1(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
            (void) v_1;  // dummy to suppress unused var warning

            stan::math::initialize(v_1, DUMMY_VAR__);
            stan::math::fill(v_1,DUMMY_VAR__);
            current_statement_begin__ = 39;
            validate_non_negative_index("like_cond", "I", I);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  like_cond(static_cast<Eigen::VectorXd::Index>(I));
            (void) like_cond;  // dummy to suppress unused var warning

            stan::math::initialize(like_cond, DUMMY_VAR__);
            stan::math::fill(like_cond,DUMMY_VAR__);
            current_statement_begin__ = 40;
            validate_non_negative_index("like_trunc", "I", I);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  like_trunc(static_cast<Eigen::VectorXd::Index>(I));
            (void) like_trunc;  // dummy to suppress unused var warning

            stan::math::initialize(like_trunc, DUMMY_VAR__);
            stan::math::fill(like_trunc,DUMMY_VAR__);


            current_statement_begin__ = 41;
            stan::math::assign(like_cond, elt_divide(elt_multiply(elt_multiply(prodvf,pf),M_factorial),sumv));
            current_statement_begin__ = 43;
            stan::math::assign(v_1, append_col(multiply((get_base1(alpha_full,1,"alpha_full",1) - 1),log_inc),subtract(lpsi,log_price)));
            current_statement_begin__ = 44;
            stan::math::assign(v_1, stan::model::deep_copy(stan::math::exp(divide(v_1,scale_full))));
            current_statement_begin__ = 45;
            stan::math::assign(sumv, multiply(v_1,ones_g));
            current_statement_begin__ = 47;
            stan::math::assign(like_trunc, elt_divide(col(v_1,1),sumv));
            current_statement_begin__ = 49;
            for (int i = 1; i <= I; ++i) {
                current_statement_begin__ = 50;
                stan::model::assign(like_trunc, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::model::deep_copy((logical_lt(get_base1(like_trunc,i,"like_trunc",1),1) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(like_trunc,i,"like_trunc",1)) : stan::math::promote_scalar<local_scalar_t__>(1) )), 
                            "assigning variable like_trunc");
            }
            current_statement_begin__ = 52;
            stan::math::assign(log_like, elt_multiply(stan::math::log(elt_divide(like_cond,subtract(1,like_trunc))),weights));
            }
        } else if (as_bool(logical_eq(trunc_data,0))) {

            current_statement_begin__ = 55;
            stan::math::assign(log_like, elt_multiply(stan::math::log(elt_divide(elt_multiply(elt_multiply(prodvf,pf),M_factorial),sumv)),weights));
        }
        current_statement_begin__ = 57;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_like);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct mdcev_ll_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T17__, typename T18__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T17__, T18__>::type>::type>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& j_quant,
             const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& quant_full,
             const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& log_price,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& log_num,
             const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& price_full,
             const Eigen::Matrix<T5__, Eigen::Dynamic,1>& log_inc,
             const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& dat_psi,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& M,
             const Eigen::Matrix<T8__, Eigen::Dynamic,1>& M_factorial,
             const Eigen::Matrix<T9__, Eigen::Dynamic,1>& weights,
             const Eigen::Matrix<T10__, Eigen::Dynamic,1>& psi,
             const Eigen::Matrix<T11__, Eigen::Dynamic,1>& gamma_full,
             const Eigen::Matrix<T12__, Eigen::Dynamic,1>& alpha_full,
             const T13__& scale_full,
             const int& I,
             const int& J,
             const int& G,
             const Eigen::Matrix<T17__, Eigen::Dynamic,1>& ones_g,
             const Eigen::Matrix<T18__, Eigen::Dynamic,Eigen::Dynamic>& nonzero,
             const int& model_num,
             const int& fixed_scale,
             const int& trunc_data, std::ostream* pstream__) const {
        return mdcev_ll(j_quant, quant_full, log_price, log_num, price_full, log_inc, dat_psi, M, M_factorial, weights, psi, gamma_full, alpha_full, scale_full, I, J, G, ones_g, nonzero, model_num, fixed_scale, trunc_data, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
gamma_ll(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& gamma,
             const int& I,
             const int& J,
             const int& G,
             const int& model_num, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 68;
        validate_non_negative_index("gamma_full", "I", I);
        validate_non_negative_index("gamma_full", "G", G);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  gamma_full(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
        (void) gamma_full;  // dummy to suppress unused var warning

        stan::math::initialize(gamma_full, DUMMY_VAR__);
        stan::math::fill(gamma_full,DUMMY_VAR__);


        current_statement_begin__ = 70;
        if (as_bool(logical_eq(model_num,2))) {
            current_statement_begin__ = 71;
            stan::math::assign(gamma_full, append_col(rep_vector(0,I),rep_matrix(1,I,J)));
        } else {
            current_statement_begin__ = 73;
            stan::math::assign(gamma_full, append_col(rep_vector(0,I),rep_matrix(transpose(gamma),I)));
        }
        current_statement_begin__ = 75;
        return stan::math::promote_scalar<fun_return_scalar_t__>(gamma_full);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct gamma_ll_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& gamma,
             const int& I,
             const int& J,
             const int& G,
             const int& model_num, std::ostream* pstream__) const {
        return gamma_ll(gamma, I, J, G, model_num, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
alpha_ll(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& alpha,
             const int& I,
             const int& J,
             const int& G,
             const int& model_num, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 80;
        validate_non_negative_index("alpha_full", "I", I);
        validate_non_negative_index("alpha_full", "G", G);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  alpha_full(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
        (void) alpha_full;  // dummy to suppress unused var warning

        stan::math::initialize(alpha_full, DUMMY_VAR__);
        stan::math::fill(alpha_full,DUMMY_VAR__);


        current_statement_begin__ = 82;
        if (as_bool(logical_eq(model_num,1))) {
            current_statement_begin__ = 83;
            stan::math::assign(alpha_full, append_col(rep_vector(get_base1(alpha,1,"alpha",1),I),rep_matrix(0,I,J)));
        } else if (as_bool(logical_eq(model_num,2))) {
            current_statement_begin__ = 85;
            stan::math::assign(alpha_full, rep_matrix(transpose(alpha),I));
        } else if (as_bool(logical_eq(model_num,3))) {
            current_statement_begin__ = 87;
            stan::math::assign(alpha_full, rep_matrix(get_base1(alpha,1,"alpha",1),I,G));
        } else {
            current_statement_begin__ = 89;
            stan::math::assign(alpha_full, rep_matrix(9.9999999999999995e-007,I,G));
        }
        current_statement_begin__ = 91;
        return stan::math::promote_scalar<fun_return_scalar_t__>(alpha_full);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct alpha_ll_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& alpha,
             const int& I,
             const int& J,
             const int& G,
             const int& model_num, std::ostream* pstream__) const {
        return alpha_ll(alpha, I, J, G, model_num, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T17__, typename T18__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T17__, T18__>::type>::type>::type>::type, Eigen::Dynamic,1>
mdcev_ll_matrix(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& j_quant,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& quant_full,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& log_price,
                    const Eigen::Matrix<T3__, Eigen::Dynamic,1>& log_num,
                    const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& price_full,
                    const Eigen::Matrix<T5__, Eigen::Dynamic,1>& log_inc,
                    const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& dat_psi,
                    const Eigen::Matrix<T7__, Eigen::Dynamic,1>& M,
                    const Eigen::Matrix<T8__, Eigen::Dynamic,1>& M_factorial,
                    const Eigen::Matrix<T9__, Eigen::Dynamic,1>& weights,
                    const Eigen::Matrix<T10__, Eigen::Dynamic,Eigen::Dynamic>& lpsi,
                    const Eigen::Matrix<T11__, Eigen::Dynamic,Eigen::Dynamic>& gamma_full,
                    const Eigen::Matrix<T12__, Eigen::Dynamic,Eigen::Dynamic>& alpha_full,
                    const T13__& scale_full,
                    const int& I,
                    const int& J,
                    const int& G,
                    const Eigen::Matrix<T17__, Eigen::Dynamic,1>& ones_g,
                    const Eigen::Matrix<T18__, Eigen::Dynamic,Eigen::Dynamic>& nonzero,
                    const int& model_num,
                    const int& fixed_scale,
                    const int& trunc_data, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T17__, T18__>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 101;
        validate_non_negative_index("log_like", "I", I);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  log_like(static_cast<Eigen::VectorXd::Index>(I));
        (void) log_like;  // dummy to suppress unused var warning

        stan::math::initialize(log_like, DUMMY_VAR__);
        stan::math::fill(log_like,DUMMY_VAR__);
        current_statement_begin__ = 102;
        validate_non_negative_index("v_j", "I", I);
        validate_non_negative_index("v_j", "J", J);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  v_j(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(J));
        (void) v_j;  // dummy to suppress unused var warning

        stan::math::initialize(v_j, DUMMY_VAR__);
        stan::math::fill(v_j,DUMMY_VAR__);
        current_statement_begin__ = 103;
        validate_non_negative_index("f", "I", I);
        validate_non_negative_index("f", "G", G);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  f(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
        (void) f;  // dummy to suppress unused var warning

        stan::math::initialize(f, DUMMY_VAR__);
        stan::math::fill(f,DUMMY_VAR__);
        current_statement_begin__ = 104;
        validate_non_negative_index("v", "I", I);
        validate_non_negative_index("v", "G", G);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  v(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
        (void) v;  // dummy to suppress unused var warning

        stan::math::initialize(v, DUMMY_VAR__);
        stan::math::fill(v,DUMMY_VAR__);
        current_statement_begin__ = 105;
        validate_non_negative_index("vf", "I", I);
        validate_non_negative_index("vf", "G", G);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  vf(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
        (void) vf;  // dummy to suppress unused var warning

        stan::math::initialize(vf, DUMMY_VAR__);
        stan::math::fill(vf,DUMMY_VAR__);
        current_statement_begin__ = 106;
        validate_non_negative_index("sumv", "I", I);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sumv(static_cast<Eigen::VectorXd::Index>(I));
        (void) sumv;  // dummy to suppress unused var warning

        stan::math::initialize(sumv, DUMMY_VAR__);
        stan::math::fill(sumv,DUMMY_VAR__);
        current_statement_begin__ = 107;
        validate_non_negative_index("pf", "I", I);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  pf(static_cast<Eigen::VectorXd::Index>(I));
        (void) pf;  // dummy to suppress unused var warning

        stan::math::initialize(pf, DUMMY_VAR__);
        stan::math::fill(pf,DUMMY_VAR__);
        current_statement_begin__ = 108;
        validate_non_negative_index("prodvf", "I", I);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  prodvf(static_cast<Eigen::VectorXd::Index>(I));
        (void) prodvf;  // dummy to suppress unused var warning

        stan::math::initialize(prodvf, DUMMY_VAR__);
        stan::math::fill(prodvf,DUMMY_VAR__);


        current_statement_begin__ = 110;
        stan::math::assign(v_j, subtract(add(lpsi,elt_multiply(subtract(block(alpha_full,1,2,I,J),1),stan::math::log(add(elt_divide(j_quant,block(gamma_full,1,2,I,J)),1)))),log_price));
        current_statement_begin__ = 111;
        stan::math::assign(f, elt_divide(add(quant_full,gamma_full),subtract(1,alpha_full)));
        current_statement_begin__ = 112;
        stan::math::assign(v, append_col(elt_multiply(subtract(col(alpha_full,1),1),log_num),v_j));
        current_statement_begin__ = 113;
        stan::math::assign(v, stan::model::deep_copy(stan::math::exp(divide(v,scale_full))));
        current_statement_begin__ = 114;
        stan::math::assign(sumv, multiply(v,ones_g));
        current_statement_begin__ = 116;
        stan::math::assign(vf, add(elt_divide(elt_multiply(nonzero,v),f),subtract(1,nonzero)));
        current_statement_begin__ = 117;
        stan::math::assign(pf, multiply(elt_multiply(elt_multiply(nonzero,price_full),f),ones_g));
        current_statement_begin__ = 119;
        for (int i = 1; i <= I; ++i) {

            current_statement_begin__ = 120;
            stan::model::assign(sumv, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        stan::model::deep_copy((pow(get_base1(sumv,i,"sumv",1),get_base1(M,i,"M",1)) * pow(scale_full,(get_base1(M,i,"M",1) - 1)))), 
                        "assigning variable sumv");
            current_statement_begin__ = 121;
            stan::model::assign(prodvf, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        prod(get_base1(vf,i,"vf",1)), 
                        "assigning variable prodvf");
        }
        current_statement_begin__ = 124;
        if (as_bool(logical_eq(trunc_data,1))) {
            {
            current_statement_begin__ = 125;
            validate_non_negative_index("v_1", "I", I);
            validate_non_negative_index("v_1", "G", G);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  v_1(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
            (void) v_1;  // dummy to suppress unused var warning

            stan::math::initialize(v_1, DUMMY_VAR__);
            stan::math::fill(v_1,DUMMY_VAR__);
            current_statement_begin__ = 126;
            validate_non_negative_index("like_cond", "I", I);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  like_cond(static_cast<Eigen::VectorXd::Index>(I));
            (void) like_cond;  // dummy to suppress unused var warning

            stan::math::initialize(like_cond, DUMMY_VAR__);
            stan::math::fill(like_cond,DUMMY_VAR__);
            current_statement_begin__ = 127;
            validate_non_negative_index("like_trunc", "I", I);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  like_trunc(static_cast<Eigen::VectorXd::Index>(I));
            (void) like_trunc;  // dummy to suppress unused var warning

            stan::math::initialize(like_trunc, DUMMY_VAR__);
            stan::math::fill(like_trunc,DUMMY_VAR__);


            current_statement_begin__ = 128;
            stan::math::assign(like_cond, elt_divide(elt_multiply(elt_multiply(prodvf,pf),M_factorial),sumv));
            current_statement_begin__ = 130;
            stan::math::assign(v_1, append_col(elt_multiply(subtract(col(alpha_full,1),1),log_inc),subtract(lpsi,log_price)));
            current_statement_begin__ = 131;
            stan::math::assign(v_1, stan::model::deep_copy(stan::math::exp(divide(v_1,scale_full))));
            current_statement_begin__ = 132;
            stan::math::assign(sumv, multiply(v_1,ones_g));
            current_statement_begin__ = 134;
            stan::math::assign(like_trunc, elt_divide(col(v_1,1),sumv));
            current_statement_begin__ = 136;
            for (int i = 1; i <= I; ++i) {
                current_statement_begin__ = 137;
                stan::model::assign(like_trunc, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::model::deep_copy((logical_lt(get_base1(like_trunc,i,"like_trunc",1),1) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(like_trunc,i,"like_trunc",1)) : stan::math::promote_scalar<local_scalar_t__>(1) )), 
                            "assigning variable like_trunc");
            }
            current_statement_begin__ = 139;
            stan::math::assign(log_like, elt_multiply(stan::math::log(elt_divide(like_cond,subtract(1,like_trunc))),weights));
            }
        } else if (as_bool(logical_eq(trunc_data,0))) {

            current_statement_begin__ = 142;
            stan::math::assign(log_like, elt_multiply(stan::math::log(elt_divide(elt_multiply(elt_multiply(prodvf,pf),M_factorial),sumv)),weights));
        }
        current_statement_begin__ = 144;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_like);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct mdcev_ll_matrix_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T17__, typename T18__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T17__, T18__>::type>::type>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& j_quant,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& quant_full,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& log_price,
                    const Eigen::Matrix<T3__, Eigen::Dynamic,1>& log_num,
                    const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& price_full,
                    const Eigen::Matrix<T5__, Eigen::Dynamic,1>& log_inc,
                    const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& dat_psi,
                    const Eigen::Matrix<T7__, Eigen::Dynamic,1>& M,
                    const Eigen::Matrix<T8__, Eigen::Dynamic,1>& M_factorial,
                    const Eigen::Matrix<T9__, Eigen::Dynamic,1>& weights,
                    const Eigen::Matrix<T10__, Eigen::Dynamic,Eigen::Dynamic>& lpsi,
                    const Eigen::Matrix<T11__, Eigen::Dynamic,Eigen::Dynamic>& gamma_full,
                    const Eigen::Matrix<T12__, Eigen::Dynamic,Eigen::Dynamic>& alpha_full,
                    const T13__& scale_full,
                    const int& I,
                    const int& J,
                    const int& G,
                    const Eigen::Matrix<T17__, Eigen::Dynamic,1>& ones_g,
                    const Eigen::Matrix<T18__, Eigen::Dynamic,Eigen::Dynamic>& nonzero,
                    const int& model_num,
                    const int& fixed_scale,
                    const int& trunc_data, std::ostream* pstream__) const {
        return mdcev_ll_matrix(j_quant, quant_full, log_price, log_num, price_full, log_inc, dat_psi, M, M_factorial, weights, lpsi, gamma_full, alpha_full, scale_full, I, J, G, ones_g, nonzero, model_num, fixed_scale, trunc_data, pstream__);
    }
};

#include <meta_header.hpp>
 class model_mdcev : public prob_grad {
private:
    int I;
    int J;
    int NPsi;
    matrix_d dat_psi;
    matrix_d j_price;
    matrix_d j_quant;
    vector_d income;
    vector_d num_price;
    vector_d M_factorial;
    int flat_priors;
    double prior_psi_sd;
    double prior_gamma_sd;
    double prior_alpha_sd;
    double prior_scale_sd;
    int model_num;
    int fixed_scale;
    int trunc_data;
    vector_d weights;
    int K;
    int L;
    vector<vector_d> data_class;
    double prior_beta_m_sd;
    int G;
    int A;
    int Gamma;
    vector_d ones_g;
    matrix_d price_full;
    matrix_d quant_full;
    matrix_d log_price;
    vector_d log_inc;
    vector_d num_quant;
    vector_d log_num;
    matrix_d nonzero;
    vector_d M;
public:
    model_mdcev(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_mdcev(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_mdcev_namespace::model_mdcev";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 153;
            context__.validate_dims("data initialization", "I", "int", context__.to_vec());
            I = int(0);
            vals_i__ = context__.vals_i("I");
            pos__ = 0;
            I = vals_i__[pos__++];
            current_statement_begin__ = 154;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            current_statement_begin__ = 155;
            context__.validate_dims("data initialization", "NPsi", "int", context__.to_vec());
            NPsi = int(0);
            vals_i__ = context__.vals_i("NPsi");
            pos__ = 0;
            NPsi = vals_i__[pos__++];
            current_statement_begin__ = 156;
            validate_non_negative_index("dat_psi", "(I * J)", (I * J));
            validate_non_negative_index("dat_psi", "NPsi", NPsi);
            context__.validate_dims("data initialization", "dat_psi", "matrix_d", context__.to_vec((I * J),NPsi));
            validate_non_negative_index("dat_psi", "(I * J)", (I * J));
            validate_non_negative_index("dat_psi", "NPsi", NPsi);
            dat_psi = matrix_d(static_cast<Eigen::VectorXd::Index>((I * J)),static_cast<Eigen::VectorXd::Index>(NPsi));
            vals_r__ = context__.vals_r("dat_psi");
            pos__ = 0;
            size_t dat_psi_m_mat_lim__ = (I * J);
            size_t dat_psi_n_mat_lim__ = NPsi;
            for (size_t n_mat__ = 0; n_mat__ < dat_psi_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < dat_psi_m_mat_lim__; ++m_mat__) {
                    dat_psi(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 157;
            validate_non_negative_index("j_price", "I", I);
            validate_non_negative_index("j_price", "J", J);
            context__.validate_dims("data initialization", "j_price", "matrix_d", context__.to_vec(I,J));
            validate_non_negative_index("j_price", "I", I);
            validate_non_negative_index("j_price", "J", J);
            j_price = matrix_d(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(J));
            vals_r__ = context__.vals_r("j_price");
            pos__ = 0;
            size_t j_price_m_mat_lim__ = I;
            size_t j_price_n_mat_lim__ = J;
            for (size_t n_mat__ = 0; n_mat__ < j_price_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < j_price_m_mat_lim__; ++m_mat__) {
                    j_price(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 158;
            validate_non_negative_index("j_quant", "I", I);
            validate_non_negative_index("j_quant", "J", J);
            context__.validate_dims("data initialization", "j_quant", "matrix_d", context__.to_vec(I,J));
            validate_non_negative_index("j_quant", "I", I);
            validate_non_negative_index("j_quant", "J", J);
            j_quant = matrix_d(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(J));
            vals_r__ = context__.vals_r("j_quant");
            pos__ = 0;
            size_t j_quant_m_mat_lim__ = I;
            size_t j_quant_n_mat_lim__ = J;
            for (size_t n_mat__ = 0; n_mat__ < j_quant_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < j_quant_m_mat_lim__; ++m_mat__) {
                    j_quant(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 159;
            validate_non_negative_index("income", "I", I);
            context__.validate_dims("data initialization", "income", "vector_d", context__.to_vec(I));
            validate_non_negative_index("income", "I", I);
            income = vector_d(static_cast<Eigen::VectorXd::Index>(I));
            vals_r__ = context__.vals_r("income");
            pos__ = 0;
            size_t income_i_vec_lim__ = I;
            for (size_t i_vec__ = 0; i_vec__ < income_i_vec_lim__; ++i_vec__) {
                income[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 160;
            validate_non_negative_index("num_price", "I", I);
            context__.validate_dims("data initialization", "num_price", "vector_d", context__.to_vec(I));
            validate_non_negative_index("num_price", "I", I);
            num_price = vector_d(static_cast<Eigen::VectorXd::Index>(I));
            vals_r__ = context__.vals_r("num_price");
            pos__ = 0;
            size_t num_price_i_vec_lim__ = I;
            for (size_t i_vec__ = 0; i_vec__ < num_price_i_vec_lim__; ++i_vec__) {
                num_price[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 161;
            validate_non_negative_index("M_factorial", "I", I);
            context__.validate_dims("data initialization", "M_factorial", "vector_d", context__.to_vec(I));
            validate_non_negative_index("M_factorial", "I", I);
            M_factorial = vector_d(static_cast<Eigen::VectorXd::Index>(I));
            vals_r__ = context__.vals_r("M_factorial");
            pos__ = 0;
            size_t M_factorial_i_vec_lim__ = I;
            for (size_t i_vec__ = 0; i_vec__ < M_factorial_i_vec_lim__; ++i_vec__) {
                M_factorial[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 162;
            context__.validate_dims("data initialization", "flat_priors", "int", context__.to_vec());
            flat_priors = int(0);
            vals_i__ = context__.vals_i("flat_priors");
            pos__ = 0;
            flat_priors = vals_i__[pos__++];
            current_statement_begin__ = 163;
            context__.validate_dims("data initialization", "prior_psi_sd", "double", context__.to_vec());
            prior_psi_sd = double(0);
            vals_r__ = context__.vals_r("prior_psi_sd");
            pos__ = 0;
            prior_psi_sd = vals_r__[pos__++];
            current_statement_begin__ = 164;
            context__.validate_dims("data initialization", "prior_gamma_sd", "double", context__.to_vec());
            prior_gamma_sd = double(0);
            vals_r__ = context__.vals_r("prior_gamma_sd");
            pos__ = 0;
            prior_gamma_sd = vals_r__[pos__++];
            current_statement_begin__ = 165;
            context__.validate_dims("data initialization", "prior_alpha_sd", "double", context__.to_vec());
            prior_alpha_sd = double(0);
            vals_r__ = context__.vals_r("prior_alpha_sd");
            pos__ = 0;
            prior_alpha_sd = vals_r__[pos__++];
            current_statement_begin__ = 166;
            context__.validate_dims("data initialization", "prior_scale_sd", "double", context__.to_vec());
            prior_scale_sd = double(0);
            vals_r__ = context__.vals_r("prior_scale_sd");
            pos__ = 0;
            prior_scale_sd = vals_r__[pos__++];
            current_statement_begin__ = 167;
            context__.validate_dims("data initialization", "model_num", "int", context__.to_vec());
            model_num = int(0);
            vals_i__ = context__.vals_i("model_num");
            pos__ = 0;
            model_num = vals_i__[pos__++];
            current_statement_begin__ = 168;
            context__.validate_dims("data initialization", "fixed_scale", "int", context__.to_vec());
            fixed_scale = int(0);
            vals_i__ = context__.vals_i("fixed_scale");
            pos__ = 0;
            fixed_scale = vals_i__[pos__++];
            current_statement_begin__ = 169;
            context__.validate_dims("data initialization", "trunc_data", "int", context__.to_vec());
            trunc_data = int(0);
            vals_i__ = context__.vals_i("trunc_data");
            pos__ = 0;
            trunc_data = vals_i__[pos__++];
            current_statement_begin__ = 170;
            validate_non_negative_index("weights", "I", I);
            context__.validate_dims("data initialization", "weights", "vector_d", context__.to_vec(I));
            validate_non_negative_index("weights", "I", I);
            weights = vector_d(static_cast<Eigen::VectorXd::Index>(I));
            vals_r__ = context__.vals_r("weights");
            pos__ = 0;
            size_t weights_i_vec_lim__ = I;
            for (size_t i_vec__ = 0; i_vec__ < weights_i_vec_lim__; ++i_vec__) {
                weights[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 171;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 174;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            current_statement_begin__ = 175;
            validate_non_negative_index("data_class", "I", I);
            validate_non_negative_index("data_class", "L", L);
            context__.validate_dims("data initialization", "data_class", "vector_d", context__.to_vec(I,L));
            validate_non_negative_index("data_class", "I", I);
            validate_non_negative_index("data_class", "L", L);
            data_class = std::vector<vector_d>(I,vector_d(static_cast<Eigen::VectorXd::Index>(L)));
            vals_r__ = context__.vals_r("data_class");
            pos__ = 0;
            size_t data_class_i_vec_lim__ = L;
            for (size_t i_vec__ = 0; i_vec__ < data_class_i_vec_lim__; ++i_vec__) {
                size_t data_class_limit_0__ = I;
                for (size_t i_0__ = 0; i_0__ < data_class_limit_0__; ++i_0__) {
                    data_class[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 176;
            context__.validate_dims("data initialization", "prior_beta_m_sd", "double", context__.to_vec());
            prior_beta_m_sd = double(0);
            vals_r__ = context__.vals_r("prior_beta_m_sd");
            pos__ = 0;
            prior_beta_m_sd = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 153;
            current_statement_begin__ = 154;
            current_statement_begin__ = 155;
            current_statement_begin__ = 156;
            current_statement_begin__ = 157;
            current_statement_begin__ = 158;
            current_statement_begin__ = 159;
            current_statement_begin__ = 160;
            current_statement_begin__ = 161;
            current_statement_begin__ = 162;
            check_greater_or_equal(function__,"flat_priors",flat_priors,0);
            check_less_or_equal(function__,"flat_priors",flat_priors,1);
            current_statement_begin__ = 163;
            current_statement_begin__ = 164;
            current_statement_begin__ = 165;
            current_statement_begin__ = 166;
            current_statement_begin__ = 167;
            check_greater_or_equal(function__,"model_num",model_num,1);
            check_less_or_equal(function__,"model_num",model_num,4);
            current_statement_begin__ = 168;
            check_greater_or_equal(function__,"fixed_scale",fixed_scale,0);
            check_less_or_equal(function__,"fixed_scale",fixed_scale,1);
            current_statement_begin__ = 169;
            check_greater_or_equal(function__,"trunc_data",trunc_data,0);
            check_less_or_equal(function__,"trunc_data",trunc_data,1);
            current_statement_begin__ = 170;
            current_statement_begin__ = 171;
            current_statement_begin__ = 174;
            current_statement_begin__ = 175;
            current_statement_begin__ = 176;
            // initialize data variables
            current_statement_begin__ = 181;
            G = int(0);
            stan::math::fill(G, std::numeric_limits<int>::min());
            stan::math::assign(G,(J + 1));
            current_statement_begin__ = 182;
            A = int(0);
            stan::math::fill(A, std::numeric_limits<int>::min());
            current_statement_begin__ = 183;
            Gamma = int(0);
            stan::math::fill(Gamma, std::numeric_limits<int>::min());
            current_statement_begin__ = 184;
            validate_non_negative_index("ones_g", "G", G);
            ones_g = vector_d(static_cast<Eigen::VectorXd::Index>(G));
            stan::math::fill(ones_g,DUMMY_VAR__);
            stan::math::assign(ones_g,rep_vector(1,G));
            current_statement_begin__ = 185;
            validate_non_negative_index("price_full", "I", I);
            validate_non_negative_index("price_full", "G", G);
            price_full = matrix_d(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
            stan::math::fill(price_full,DUMMY_VAR__);
            stan::math::assign(price_full,append_col(num_price,j_price));
            current_statement_begin__ = 186;
            validate_non_negative_index("quant_full", "I", I);
            validate_non_negative_index("quant_full", "G", G);
            quant_full = matrix_d(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
            stan::math::fill(quant_full,DUMMY_VAR__);
            current_statement_begin__ = 187;
            validate_non_negative_index("log_price", "I", I);
            validate_non_negative_index("log_price", "J", J);
            log_price = matrix_d(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(J));
            stan::math::fill(log_price,DUMMY_VAR__);
            stan::math::assign(log_price,stan::math::log(j_price));
            current_statement_begin__ = 188;
            validate_non_negative_index("log_inc", "I", I);
            log_inc = vector_d(static_cast<Eigen::VectorXd::Index>(I));
            stan::math::fill(log_inc,DUMMY_VAR__);
            stan::math::assign(log_inc,stan::math::log(income));
            current_statement_begin__ = 189;
            validate_non_negative_index("num_quant", "I", I);
            num_quant = vector_d(static_cast<Eigen::VectorXd::Index>(I));
            stan::math::fill(num_quant,DUMMY_VAR__);
            current_statement_begin__ = 190;
            validate_non_negative_index("log_num", "I", I);
            log_num = vector_d(static_cast<Eigen::VectorXd::Index>(I));
            stan::math::fill(log_num,DUMMY_VAR__);
            current_statement_begin__ = 191;
            validate_non_negative_index("nonzero", "I", I);
            validate_non_negative_index("nonzero", "G", G);
            nonzero = matrix_d(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
            stan::math::fill(nonzero,DUMMY_VAR__);
            stan::math::assign(nonzero,rep_matrix(transpose(rep_vector(1,G)),I));
            current_statement_begin__ = 192;
            validate_non_negative_index("M", "I", I);
            M = vector_d(static_cast<Eigen::VectorXd::Index>(I));
            stan::math::fill(M,DUMMY_VAR__);

            current_statement_begin__ = 194;
            for (int i = 1; i <= I; ++i) {

                current_statement_begin__ = 195;
                stan::model::assign(num_quant, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(income,i,"income",1) - multiply(get_base1(j_price,i,"j_price",1),transpose(get_base1(j_quant,i,"j_quant",1)))) / get_base1(num_price,i,"num_price",1)), 
                            "assigning variable num_quant");
                current_statement_begin__ = 196;
                for (int g = 2; g <= G; ++g) {

                    current_statement_begin__ = 197;
                    stan::model::assign(nonzero, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list())), 
                                (logical_gt(get_base1(j_quant,i,(g - 1),"j_quant",1),0) ? 1 : 0 ), 
                                "assigning variable nonzero");
                }
                current_statement_begin__ = 199;
                stan::model::assign(M, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            sum(get_base1(nonzero,i,"nonzero",1)), 
                            "assigning variable M");
            }
            current_statement_begin__ = 202;
            stan::math::assign(log_num, stan::math::log(elt_divide(num_quant,num_price)));
            current_statement_begin__ = 203;
            stan::math::assign(quant_full, append_col(num_quant,j_quant));
            current_statement_begin__ = 205;
            if (as_bool((primitive_value(logical_eq(model_num,1)) || primitive_value(logical_eq(model_num,3))))) {

                current_statement_begin__ = 206;
                stan::math::assign(A, 1);
                current_statement_begin__ = 207;
                stan::math::assign(Gamma, J);
            } else if (as_bool(logical_eq(model_num,2))) {

                current_statement_begin__ = 209;
                stan::math::assign(A, G);
                current_statement_begin__ = 210;
                stan::math::assign(Gamma, 0);
            } else if (as_bool(logical_eq(model_num,4))) {

                current_statement_begin__ = 212;
                stan::math::assign(A, 0);
                current_statement_begin__ = 213;
                stan::math::assign(Gamma, J);
            }

            // validate transformed data
            current_statement_begin__ = 181;
            current_statement_begin__ = 182;
            current_statement_begin__ = 183;
            current_statement_begin__ = 184;
            current_statement_begin__ = 185;
            current_statement_begin__ = 186;
            current_statement_begin__ = 187;
            current_statement_begin__ = 188;
            current_statement_begin__ = 189;
            current_statement_begin__ = 190;
            current_statement_begin__ = 191;
            current_statement_begin__ = 192;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 218;
            validate_non_negative_index("psi", "NPsi", NPsi);
            validate_non_negative_index("psi", "K", K);
            num_params_r__ += NPsi * K;
            current_statement_begin__ = 219;
            validate_non_negative_index("gamma", "Gamma", Gamma);
            validate_non_negative_index("gamma", "K", K);
            num_params_r__ += Gamma * K;
            current_statement_begin__ = 220;
            validate_non_negative_index("alpha", "A", A);
            validate_non_negative_index("alpha", "K", K);
            num_params_r__ += A * K;
            current_statement_begin__ = 221;
            validate_non_negative_index("scale", "(logical_eq(fixed_scale,0) ? K : 0 )", (logical_eq(fixed_scale,0) ? K : 0 ));
            num_params_r__ += (logical_eq(fixed_scale,0) ? K : 0 );
            current_statement_begin__ = 222;
        validate_non_negative_index("beta_m", "(K - 1)", (K - 1));
            validate_non_negative_index("beta_m", "L", L);
            num_params_r__ += (K - 1) * L;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_mdcev() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("psi")))
            throw std::runtime_error("variable psi missing");
        vals_r__ = context__.vals_r("psi");
        pos__ = 0U;
        validate_non_negative_index("psi", "K", K);
        validate_non_negative_index("psi", "NPsi", NPsi);
        context__.validate_dims("initialization", "psi", "vector_d", context__.to_vec(K,NPsi));
        std::vector<vector_d> psi(K,vector_d(static_cast<Eigen::VectorXd::Index>(NPsi)));
        for (int j1__ = 0U; j1__ < NPsi; ++j1__)
            for (int i0__ = 0U; i0__ < K; ++i0__)
                psi[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < K; ++i0__)
            try {
            writer__.vector_unconstrain(psi[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi: ") + e.what());
        }

        if (!(context__.contains_r("gamma")))
            throw std::runtime_error("variable gamma missing");
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "K", K);
        validate_non_negative_index("gamma", "Gamma", Gamma);
        context__.validate_dims("initialization", "gamma", "vector_d", context__.to_vec(K,Gamma));
        std::vector<vector_d> gamma(K,vector_d(static_cast<Eigen::VectorXd::Index>(Gamma)));
        for (int j1__ = 0U; j1__ < Gamma; ++j1__)
            for (int i0__ = 0U; i0__ < K; ++i0__)
                gamma[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < K; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,gamma[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma: ") + e.what());
        }

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "K", K);
        validate_non_negative_index("alpha", "A", A);
        context__.validate_dims("initialization", "alpha", "vector_d", context__.to_vec(K,A));
        std::vector<vector_d> alpha(K,vector_d(static_cast<Eigen::VectorXd::Index>(A)));
        for (int j1__ = 0U; j1__ < A; ++j1__)
            for (int i0__ = 0U; i0__ < K; ++i0__)
                alpha[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < K; ++i0__)
            try {
            writer__.vector_lub_unconstrain(0,1,alpha[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        if (!(context__.contains_r("scale")))
            throw std::runtime_error("variable scale missing");
        vals_r__ = context__.vals_r("scale");
        pos__ = 0U;
        validate_non_negative_index("scale", "(logical_eq(fixed_scale,0) ? K : 0 )", (logical_eq(fixed_scale,0) ? K : 0 ));
        context__.validate_dims("initialization", "scale", "vector_d", context__.to_vec((logical_eq(fixed_scale,0) ? K : 0 )));
        vector_d scale(static_cast<Eigen::VectorXd::Index>((logical_eq(fixed_scale,0) ? K : 0 )));
        for (int j1__ = 0U; j1__ < (logical_eq(fixed_scale,0) ? K : 0 ); ++j1__)
            scale(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,scale);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable scale: ") + e.what());
        }

        if (!(context__.contains_r("beta_m")))
            throw std::runtime_error("variable beta_m missing");
        vals_r__ = context__.vals_r("beta_m");
        pos__ = 0U;
        validate_non_negative_index("beta_m", "(K - 1)", (K - 1));
        validate_non_negative_index("beta_m", "L", L);
        context__.validate_dims("initialization", "beta_m", "matrix_d", context__.to_vec((K - 1),L));
        matrix_d beta_m(static_cast<Eigen::VectorXd::Index>((K - 1)),static_cast<Eigen::VectorXd::Index>(L));
        for (int j2__ = 0U; j2__ < L; ++j2__)
            for (int j1__ = 0U; j1__ < (K - 1); ++j1__)
                beta_m(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(beta_m);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_m: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > psi;
            size_t dim_psi_0__ = K;
            psi.reserve(dim_psi_0__);
            for (size_t k_0__ = 0; k_0__ < dim_psi_0__; ++k_0__) {
                if (jacobian__)
                    psi.push_back(in__.vector_constrain(NPsi,lp__));
                else
                    psi.push_back(in__.vector_constrain(NPsi));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > gamma;
            size_t dim_gamma_0__ = K;
            gamma.reserve(dim_gamma_0__);
            for (size_t k_0__ = 0; k_0__ < dim_gamma_0__; ++k_0__) {
                if (jacobian__)
                    gamma.push_back(in__.vector_lb_constrain(0,Gamma,lp__));
                else
                    gamma.push_back(in__.vector_lb_constrain(0,Gamma));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > alpha;
            size_t dim_alpha_0__ = K;
            alpha.reserve(dim_alpha_0__);
            for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
                if (jacobian__)
                    alpha.push_back(in__.vector_lub_constrain(0,1,A,lp__));
                else
                    alpha.push_back(in__.vector_lub_constrain(0,1,A));
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  scale;
            (void) scale;  // dummy to suppress unused var warning
            if (jacobian__)
                scale = in__.vector_lb_constrain(0,(logical_eq(fixed_scale,0) ? K : 0 ),lp__);
            else
                scale = in__.vector_lb_constrain(0,(logical_eq(fixed_scale,0) ? K : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  beta_m;
            (void) beta_m;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_m = in__.matrix_constrain((K - 1),L,lp__);
            else
                beta_m = in__.matrix_constrain((K - 1),L);


            // transformed parameters
            current_statement_begin__ = 226;
            validate_non_negative_index("log_like", "I", I);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  log_like(static_cast<Eigen::VectorXd::Index>(I));
            (void) log_like;  // dummy to suppress unused var warning

            stan::math::initialize(log_like, DUMMY_VAR__);
            stan::math::fill(log_like,DUMMY_VAR__);


            current_statement_begin__ = 228;
            if (as_bool(logical_eq(K,1))) {
                {
                current_statement_begin__ = 229;
                validate_non_negative_index("lpsi", "I", I);
                validate_non_negative_index("lpsi", "J", J);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  lpsi(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(J));
                (void) lpsi;  // dummy to suppress unused var warning

                stan::math::initialize(lpsi, DUMMY_VAR__);
                stan::math::fill(lpsi,DUMMY_VAR__);
                stan::math::assign(lpsi,to_matrix(multiply(stan::model::rvalue(dat_psi, stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()), "dat_psi"),get_base1(psi,1,"psi",1)),I,J,0));
                current_statement_begin__ = 230;
                validate_non_negative_index("gamma_full", "I", I);
                validate_non_negative_index("gamma_full", "G", G);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  gamma_full(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
                (void) gamma_full;  // dummy to suppress unused var warning

                stan::math::initialize(gamma_full, DUMMY_VAR__);
                stan::math::fill(gamma_full,DUMMY_VAR__);
                stan::math::assign(gamma_full,gamma_ll(get_base1(gamma,1,"gamma",1),I,J,G,model_num, pstream__));
                current_statement_begin__ = 231;
                validate_non_negative_index("alpha_full", "I", I);
                validate_non_negative_index("alpha_full", "G", G);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  alpha_full(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
                (void) alpha_full;  // dummy to suppress unused var warning

                stan::math::initialize(alpha_full, DUMMY_VAR__);
                stan::math::fill(alpha_full,DUMMY_VAR__);
                stan::math::assign(alpha_full,alpha_ll(get_base1(alpha,1,"alpha",1),I,J,G,model_num, pstream__));
                current_statement_begin__ = 232;
                local_scalar_t__ scale_full;
                (void) scale_full;  // dummy to suppress unused var warning

                stan::math::initialize(scale_full, DUMMY_VAR__);
                stan::math::fill(scale_full,DUMMY_VAR__);
                stan::math::assign(scale_full,(logical_eq(fixed_scale,0) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(scale,1,"scale",1)) : stan::math::promote_scalar<local_scalar_t__>(1.0) ));


                current_statement_begin__ = 234;
                stan::math::assign(log_like, mdcev_ll_matrix(j_quant,quant_full,log_price,log_num,price_full,log_inc,dat_psi,M,M_factorial,weights,lpsi,gamma_full,alpha_full,scale_full,I,J,G,ones_g,nonzero,model_num,fixed_scale,trunc_data, pstream__));
                }
            } else if (as_bool(logical_gt(K,1))) {
                {
                current_statement_begin__ = 240;
                validate_non_negative_index("log_like_util", "I", I);
                validate_non_negative_index("log_like_util", "K", K);
                vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > log_like_util(K, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(I))));
                stan::math::initialize(log_like_util, DUMMY_VAR__);
                stan::math::fill(log_like_util,DUMMY_VAR__);


                current_statement_begin__ = 241;
                for (int k = 1; k <= K; ++k) {
                    {
                    current_statement_begin__ = 242;
                    validate_non_negative_index("lpsi", "I", I);
                    validate_non_negative_index("lpsi", "J", J);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  lpsi(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(J));
                    (void) lpsi;  // dummy to suppress unused var warning

                    stan::math::initialize(lpsi, DUMMY_VAR__);
                    stan::math::fill(lpsi,DUMMY_VAR__);
                    stan::math::assign(lpsi,to_matrix(multiply(stan::model::rvalue(dat_psi, stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()), "dat_psi"),get_base1(psi,k,"psi",1)),I,J,0));
                    current_statement_begin__ = 243;
                    validate_non_negative_index("gamma_full", "I", I);
                    validate_non_negative_index("gamma_full", "G", G);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  gamma_full(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
                    (void) gamma_full;  // dummy to suppress unused var warning

                    stan::math::initialize(gamma_full, DUMMY_VAR__);
                    stan::math::fill(gamma_full,DUMMY_VAR__);
                    stan::math::assign(gamma_full,gamma_ll(get_base1(gamma,k,"gamma",1),I,J,G,model_num, pstream__));
                    current_statement_begin__ = 244;
                    validate_non_negative_index("alpha_full", "I", I);
                    validate_non_negative_index("alpha_full", "G", G);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  alpha_full(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
                    (void) alpha_full;  // dummy to suppress unused var warning

                    stan::math::initialize(alpha_full, DUMMY_VAR__);
                    stan::math::fill(alpha_full,DUMMY_VAR__);
                    stan::math::assign(alpha_full,alpha_ll(get_base1(alpha,k,"alpha",1),I,J,G,model_num, pstream__));
                    current_statement_begin__ = 245;
                    local_scalar_t__ scale_full;
                    (void) scale_full;  // dummy to suppress unused var warning

                    stan::math::initialize(scale_full, DUMMY_VAR__);
                    stan::math::fill(scale_full,DUMMY_VAR__);
                    stan::math::assign(scale_full,(logical_eq(fixed_scale,0) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(scale,k,"scale",1)) : stan::math::promote_scalar<local_scalar_t__>(1.0) ));


                    current_statement_begin__ = 247;
                    stan::model::assign(log_like_util, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                mdcev_ll_matrix(j_quant,quant_full,log_price,log_num,price_full,log_inc,dat_psi,M,M_factorial,weights,lpsi,gamma_full,alpha_full,scale_full,I,J,G,ones_g,nonzero,model_num,fixed_scale,trunc_data, pstream__), 
                                "assigning variable log_like_util");
                    }
                }
                current_statement_begin__ = 252;
                for (int i = 1; i <= I; ++i) {
                    {
                    current_statement_begin__ = 253;
                    validate_non_negative_index("ltheta", "K", K);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ltheta(static_cast<Eigen::VectorXd::Index>(K));
                    (void) ltheta;  // dummy to suppress unused var warning

                    stan::math::initialize(ltheta, DUMMY_VAR__);
                    stan::math::fill(ltheta,DUMMY_VAR__);
                    stan::math::assign(ltheta,log_softmax(append_row(0,multiply(beta_m,get_base1(data_class,i,"data_class",1)))));
                    current_statement_begin__ = 254;
                    validate_non_negative_index("lps", "K", K);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lps(static_cast<Eigen::VectorXd::Index>(K));
                    (void) lps;  // dummy to suppress unused var warning

                    stan::math::initialize(lps, DUMMY_VAR__);
                    stan::math::fill(lps,DUMMY_VAR__);


                    current_statement_begin__ = 255;
                    for (int k = 1; k <= K; ++k) {

                        current_statement_begin__ = 256;
                        stan::model::assign(lps, 
                                    stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                    (get_base1(ltheta,k,"ltheta",1) + get_base1(get_base1(log_like_util,k,"log_like_util",1),i,"log_like_util",2)), 
                                    "assigning variable lps");
                    }
                    current_statement_begin__ = 258;
                    stan::model::assign(log_like, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                log_sum_exp(lps), 
                                "assigning variable log_like");
                    }
                }
                }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < I; ++i0__) {
                if (stan::math::is_uninitialized(log_like(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_like" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 226;

            // model body

            current_statement_begin__ = 265;
            if (as_bool(logical_eq(flat_priors,0))) {

                current_statement_begin__ = 266;
                lp_accum__.add(normal_log<propto__>(scale, 1, prior_scale_sd));
                current_statement_begin__ = 268;
                if (as_bool(logical_eq(K,1))) {

                    current_statement_begin__ = 269;
                    lp_accum__.add(normal_log<propto__>(get_base1(psi,1,"psi",1), 0, prior_psi_sd));
                    current_statement_begin__ = 270;
                    lp_accum__.add(normal_log<propto__>(get_base1(gamma,1,"gamma",1), 0, prior_gamma_sd));
                    current_statement_begin__ = 271;
                    lp_accum__.add(normal_log<propto__>(get_base1(alpha,1,"alpha",1), 0.5, prior_alpha_sd));
                } else if (as_bool(logical_gt(K,1))) {

                    current_statement_begin__ = 273;
                    lp_accum__.add(normal_log<propto__>(to_vector(beta_m), 0, prior_beta_m_sd));
                    current_statement_begin__ = 274;
                    for (int k = 1; k <= K; ++k) {

                        current_statement_begin__ = 275;
                        lp_accum__.add(normal_log<propto__>(to_vector(get_base1(psi,k,"psi",1)), 0, prior_psi_sd));
                        current_statement_begin__ = 276;
                        lp_accum__.add(normal_log<propto__>(to_vector(get_base1(gamma,k,"gamma",1)), 0, prior_gamma_sd));
                        current_statement_begin__ = 277;
                        lp_accum__.add(normal_log<propto__>(to_vector(get_base1(alpha,k,"alpha",1)), 0.5, prior_alpha_sd));
                    }
                }
            }
            current_statement_begin__ = 282;
            lp_accum__.add(sum(log_like));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("psi");
        names__.push_back("gamma");
        names__.push_back("alpha");
        names__.push_back("scale");
        names__.push_back("beta_m");
        names__.push_back("log_like");
        names__.push_back("sum_log_lik");
        names__.push_back("theta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(NPsi);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(Gamma);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(fixed_scale,0) ? K : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((K - 1));
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back((logical_gt(K,1) ? I : 0 ));
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_mdcev_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<vector_d> psi;
        size_t dim_psi_0__ = K;
        for (size_t k_0__ = 0; k_0__ < dim_psi_0__; ++k_0__) {
            psi.push_back(in__.vector_constrain(NPsi));
        }
        vector<vector_d> gamma;
        size_t dim_gamma_0__ = K;
        for (size_t k_0__ = 0; k_0__ < dim_gamma_0__; ++k_0__) {
            gamma.push_back(in__.vector_lb_constrain(0,Gamma));
        }
        vector<vector_d> alpha;
        size_t dim_alpha_0__ = K;
        for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
            alpha.push_back(in__.vector_lub_constrain(0,1,A));
        }
        vector_d scale = in__.vector_lb_constrain(0,(logical_eq(fixed_scale,0) ? K : 0 ));
        matrix_d beta_m = in__.matrix_constrain((K - 1),L);
            for (int k_1__ = 0; k_1__ < NPsi; ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(psi[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < Gamma; ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(gamma[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < A; ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(alpha[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(fixed_scale,0) ? K : 0 ); ++k_0__) {
            vars__.push_back(scale[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < L; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (K - 1); ++k_0__) {
                vars__.push_back(beta_m(k_0__, k_1__));
                }
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 226;
            validate_non_negative_index("log_like", "I", I);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  log_like(static_cast<Eigen::VectorXd::Index>(I));
            (void) log_like;  // dummy to suppress unused var warning

            stan::math::initialize(log_like, DUMMY_VAR__);
            stan::math::fill(log_like,DUMMY_VAR__);


            current_statement_begin__ = 228;
            if (as_bool(logical_eq(K,1))) {
                {
                current_statement_begin__ = 229;
                validate_non_negative_index("lpsi", "I", I);
                validate_non_negative_index("lpsi", "J", J);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  lpsi(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(J));
                (void) lpsi;  // dummy to suppress unused var warning

                stan::math::initialize(lpsi, DUMMY_VAR__);
                stan::math::fill(lpsi,DUMMY_VAR__);
                stan::math::assign(lpsi,to_matrix(multiply(stan::model::rvalue(dat_psi, stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()), "dat_psi"),get_base1(psi,1,"psi",1)),I,J,0));
                current_statement_begin__ = 230;
                validate_non_negative_index("gamma_full", "I", I);
                validate_non_negative_index("gamma_full", "G", G);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  gamma_full(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
                (void) gamma_full;  // dummy to suppress unused var warning

                stan::math::initialize(gamma_full, DUMMY_VAR__);
                stan::math::fill(gamma_full,DUMMY_VAR__);
                stan::math::assign(gamma_full,gamma_ll(get_base1(gamma,1,"gamma",1),I,J,G,model_num, pstream__));
                current_statement_begin__ = 231;
                validate_non_negative_index("alpha_full", "I", I);
                validate_non_negative_index("alpha_full", "G", G);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  alpha_full(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
                (void) alpha_full;  // dummy to suppress unused var warning

                stan::math::initialize(alpha_full, DUMMY_VAR__);
                stan::math::fill(alpha_full,DUMMY_VAR__);
                stan::math::assign(alpha_full,alpha_ll(get_base1(alpha,1,"alpha",1),I,J,G,model_num, pstream__));
                current_statement_begin__ = 232;
                local_scalar_t__ scale_full;
                (void) scale_full;  // dummy to suppress unused var warning

                stan::math::initialize(scale_full, DUMMY_VAR__);
                stan::math::fill(scale_full,DUMMY_VAR__);
                stan::math::assign(scale_full,(logical_eq(fixed_scale,0) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(scale,1,"scale",1)) : stan::math::promote_scalar<local_scalar_t__>(1.0) ));


                current_statement_begin__ = 234;
                stan::math::assign(log_like, mdcev_ll_matrix(j_quant,quant_full,log_price,log_num,price_full,log_inc,dat_psi,M,M_factorial,weights,lpsi,gamma_full,alpha_full,scale_full,I,J,G,ones_g,nonzero,model_num,fixed_scale,trunc_data, pstream__));
                }
            } else if (as_bool(logical_gt(K,1))) {
                {
                current_statement_begin__ = 240;
                validate_non_negative_index("log_like_util", "I", I);
                validate_non_negative_index("log_like_util", "K", K);
                vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > log_like_util(K, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(I))));
                stan::math::initialize(log_like_util, DUMMY_VAR__);
                stan::math::fill(log_like_util,DUMMY_VAR__);


                current_statement_begin__ = 241;
                for (int k = 1; k <= K; ++k) {
                    {
                    current_statement_begin__ = 242;
                    validate_non_negative_index("lpsi", "I", I);
                    validate_non_negative_index("lpsi", "J", J);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  lpsi(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(J));
                    (void) lpsi;  // dummy to suppress unused var warning

                    stan::math::initialize(lpsi, DUMMY_VAR__);
                    stan::math::fill(lpsi,DUMMY_VAR__);
                    stan::math::assign(lpsi,to_matrix(multiply(stan::model::rvalue(dat_psi, stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()), "dat_psi"),get_base1(psi,k,"psi",1)),I,J,0));
                    current_statement_begin__ = 243;
                    validate_non_negative_index("gamma_full", "I", I);
                    validate_non_negative_index("gamma_full", "G", G);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  gamma_full(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
                    (void) gamma_full;  // dummy to suppress unused var warning

                    stan::math::initialize(gamma_full, DUMMY_VAR__);
                    stan::math::fill(gamma_full,DUMMY_VAR__);
                    stan::math::assign(gamma_full,gamma_ll(get_base1(gamma,k,"gamma",1),I,J,G,model_num, pstream__));
                    current_statement_begin__ = 244;
                    validate_non_negative_index("alpha_full", "I", I);
                    validate_non_negative_index("alpha_full", "G", G);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  alpha_full(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(G));
                    (void) alpha_full;  // dummy to suppress unused var warning

                    stan::math::initialize(alpha_full, DUMMY_VAR__);
                    stan::math::fill(alpha_full,DUMMY_VAR__);
                    stan::math::assign(alpha_full,alpha_ll(get_base1(alpha,k,"alpha",1),I,J,G,model_num, pstream__));
                    current_statement_begin__ = 245;
                    local_scalar_t__ scale_full;
                    (void) scale_full;  // dummy to suppress unused var warning

                    stan::math::initialize(scale_full, DUMMY_VAR__);
                    stan::math::fill(scale_full,DUMMY_VAR__);
                    stan::math::assign(scale_full,(logical_eq(fixed_scale,0) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(scale,k,"scale",1)) : stan::math::promote_scalar<local_scalar_t__>(1.0) ));


                    current_statement_begin__ = 247;
                    stan::model::assign(log_like_util, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                mdcev_ll_matrix(j_quant,quant_full,log_price,log_num,price_full,log_inc,dat_psi,M,M_factorial,weights,lpsi,gamma_full,alpha_full,scale_full,I,J,G,ones_g,nonzero,model_num,fixed_scale,trunc_data, pstream__), 
                                "assigning variable log_like_util");
                    }
                }
                current_statement_begin__ = 252;
                for (int i = 1; i <= I; ++i) {
                    {
                    current_statement_begin__ = 253;
                    validate_non_negative_index("ltheta", "K", K);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ltheta(static_cast<Eigen::VectorXd::Index>(K));
                    (void) ltheta;  // dummy to suppress unused var warning

                    stan::math::initialize(ltheta, DUMMY_VAR__);
                    stan::math::fill(ltheta,DUMMY_VAR__);
                    stan::math::assign(ltheta,log_softmax(append_row(0,multiply(beta_m,get_base1(data_class,i,"data_class",1)))));
                    current_statement_begin__ = 254;
                    validate_non_negative_index("lps", "K", K);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lps(static_cast<Eigen::VectorXd::Index>(K));
                    (void) lps;  // dummy to suppress unused var warning

                    stan::math::initialize(lps, DUMMY_VAR__);
                    stan::math::fill(lps,DUMMY_VAR__);


                    current_statement_begin__ = 255;
                    for (int k = 1; k <= K; ++k) {

                        current_statement_begin__ = 256;
                        stan::model::assign(lps, 
                                    stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                    (get_base1(ltheta,k,"ltheta",1) + get_base1(get_base1(log_like_util,k,"log_like_util",1),i,"log_like_util",2)), 
                                    "assigning variable lps");
                    }
                    current_statement_begin__ = 258;
                    stan::model::assign(log_like, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                log_sum_exp(lps), 
                                "assigning variable log_like");
                    }
                }
                }
            }

            // validate transformed parameters
            current_statement_begin__ = 226;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < I; ++k_0__) {
            vars__.push_back(log_like[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 286;
            local_scalar_t__ sum_log_lik;
            (void) sum_log_lik;  // dummy to suppress unused var warning

            stan::math::initialize(sum_log_lik, DUMMY_VAR__);
            stan::math::fill(sum_log_lik,DUMMY_VAR__);
            stan::math::assign(sum_log_lik,0);
            current_statement_begin__ = 287;
            validate_non_negative_index("theta", "(logical_gt(K,1) ? I : 0 )", (logical_gt(K,1) ? I : 0 ));
            validate_non_negative_index("theta", "K", K);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > theta(K, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>((logical_gt(K,1) ? I : 0 )))));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta,DUMMY_VAR__);


            current_statement_begin__ = 289;
            for (int i = 1; i <= I; ++i) {

                current_statement_begin__ = 290;
                stan::math::assign(sum_log_lik, stan::model::deep_copy((sum_log_lik + get_base1(log_like,i,"log_like",1))));
                current_statement_begin__ = 291;
                if (as_bool(logical_gt(K,1))) {
                    {
                    current_statement_begin__ = 292;
                    validate_non_negative_index("theta1", "K", K);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta1(static_cast<Eigen::VectorXd::Index>(K));
                    (void) theta1;  // dummy to suppress unused var warning

                    stan::math::initialize(theta1, DUMMY_VAR__);
                    stan::math::fill(theta1,DUMMY_VAR__);
                    stan::math::assign(theta1,log_softmax(append_row(0,multiply(beta_m,get_base1(data_class,i,"data_class",1)))));


                    current_statement_begin__ = 293;
                    for (int k = 1; k <= K; ++k) {
                        current_statement_begin__ = 294;
                        stan::model::assign(theta, 
                                    stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                    get_base1(theta1,k,"theta1",1), 
                                    "assigning variable theta");
                    }
                    }
                }
            }

            // validate generated quantities
            current_statement_begin__ = 286;
            current_statement_begin__ = 287;

            // write generated quantities
        vars__.push_back(sum_log_lik);
            for (int k_1__ = 0; k_1__ < (logical_gt(K,1) ? I : 0 ); ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(theta[k_0__][k_1__]);
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_mdcev";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= NPsi; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Gamma; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= A; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(fixed_scale,0) ? K : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "scale" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= L; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (K - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_m" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= I; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_like" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sum_log_lik";
        param_names__.push_back(param_name_stream__.str());
        for (int k_1__ = 1; k_1__ <= (logical_gt(K,1) ? I : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= NPsi; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Gamma; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= A; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(fixed_scale,0) ? K : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "scale" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= L; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (K - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_m" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= I; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_like" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sum_log_lik";
        param_names__.push_back(param_name_stream__.str());
        for (int k_1__ = 1; k_1__ <= (logical_gt(K,1) ? I : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }

}; // model

}

typedef model_mdcev_namespace::model_mdcev stan_model;


#endif
